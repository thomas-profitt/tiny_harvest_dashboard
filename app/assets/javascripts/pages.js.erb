var updateHarvestDataInterval = 60000;
var updateHarvestDataIntervalID = null;
var changeBackgroundColorInterval = 30000;
var changeBackgroundColorIntervalID = null;

var days = 0;

$(document).ready( function() {
  changeBackgroundColor();
  changeBackgroundImage('<%= image_path("bg5.png") %>');
  $("html").css("background-size", "cover");
  $("html").css("background-position", "top left");
  updateHarvestData();

  var paramsDays = parseInt(getURLParam("days"));
  if (isNaN(paramsDays)) {
    paramsDays = 0;
  }
  setDays(paramsDays);

  $("#yesterday").click(function(e) {
    setDays(days - 1);
    e.preventDefault();
  });

  $("#tomorrow").click(function(e) {
    setDays(days + 1);
    e.preventDefault();
  });

  $("#today").click(function(e) {
    setDays(0);
    e.preventDefault();
  });

  $("#last-saturday").click(function(e) {
    // FIXME: Sandwich code should be used to DRY out these two functions
    // Dumb trick, works great
    var newDays = days - 1;

    while (getToday().addDays(newDays).getDay() != Date.SATURDAY) {
      newDays -= 1;
    }

    setDays(newDays);
    e.preventDefault();
  });

  $("#this-saturday").click(function(e) {
    // FIXME: Sandwich code should be used to DRY out these two functions
    // Dumb trick, works great
    var newDays = days + 1;

    while (getToday().addDays(newDays).getDay() != Date.SATURDAY) {
      newDays += 1;
    }

    setDays(newDays);
    e.preventDefault();
  });

  updateHarvestDataIntervalID =
    window.setInterval(function() {
      updateHarvestData();
    }, updateHarvestDataInterval);

  changeBackgroundColorIntervalID =
    window.setInterval(function() {
      changeBackgroundColor();
    }, changeBackgroundColorInterval);

});

function scrambleScrambledTimes() {
  var possibleCharacters =
    ['0','1','2','3','4','5','6','7','8','9','A','K'];
  $(".scrambled-time").each(function(index, value) {
    this.innerHTML =
      _.sample(possibleCharacters, 2).join("")
      + ":" + _.sample(possibleCharacters, 2).join("");
  });
}

function startLoading() {
  $(".time").addClass("scrambled-time");
  window.clearInterval(scrambleScrambledTimes);
  window.setInterval(scrambleScrambledTimes, 75);
}

function stopLoading() {
  $(".time").removeClass("scrambled-time");
  window.clearInterval(scrambleScrambledTimes);
}

function transition(direction) {
  var transitionTime = 750;
  // all, not transform, is used because Safari is weird
  var transition = "all " + transitionTime + "ms ease";
  var selector = "body *:not(.static)";
  var transformSequence = null;
  if (direction === "left") {
    transformSequence = ["translateX(100vw)", "translateX(-100vw)", "none"];
  }
  if (direction === "right") {
    transformSequence = ["translateX(-100vw)", "translateX(100vw)", "none"];
  }
  if (direction === "up") {
    transformSequence = ["translateY(100vh)", "translateY(-100vh)", "none"];
  }
  if (direction === "down") {
    transformSequence = ["translateY(-100vh)", "translateY(100vh)", "none"];
  }
  if (transformSequence === null) {
    return false;
  }

  $("html").css("overflow", "hidden");

  $(selector).css("transition", transition);
  $(selector).css("transform", transformSequence[0]);

  setTimeout(function() {
    $(selector).css("transition", "none");
    $(selector).css("transform", transformSequence[1]);
  }, transitionTime);

  setTimeout(function() {
    $(selector).css("transition", transition);
    $(selector).css("transform", transformSequence[2]);
  }, transitionTime + 125);

  setTimeout(function() {
    $(selector).css("overflow", "inherit");

    $(selector).css("transition", "none");
    $("html").css("overflow", "inherit");
  }, (transitionTime * 2) + 125);
}

function setDays(newDays) {
  var oldDays = days;
  console.log("Changing days from " + oldDays + " to " + newDays);
  days = newDays;

  if (newDays < oldDays) {
    transition("left");
  }
  if (newDays > oldDays) {
    transition("right");
  }

  clearTodayClasses();
  if (!(newDays === 0)) {
    var newClass = "";
    if (newDays < 0) {
      newClass = "forward-to-today";
    } else {
      newClass = "back-to-today";
    }
    var todayElement = $("#today")[0];
    if (todayElement) {
      todayElement.classList.add(newClass);
    }
  }

  setTimeout(function() {
    clearHarvestData();
  }, 500);

  updateHarvestData();
}

function clearTodayClasses() {
  var element = $("#today")[0];
  if (element) {
    element.classList.remove("back-to-today");
    element.classList.remove("forward-to-today");
  }
}

function changeBackgroundImage(url) {
  $("html").css("background-image", "url(\"" + url + "\")");
}

// Accepts hours as a date or number (0.0 to 24)
function changeBackgroundColor(dateOrHours) {
  if (typeof dateOrHours === typeof new Date()) {
    var hours = dateOrHours.getHours() + (dateOrHours.getMinutes() / 60.0);
  } else if (typeof dateOrHours === typeof 1.0) {
    var hours = dateOrHours;
  }
  var url = "/api/sky_color.json"
  if (typeof hours === typeof 1.0) {
    url += "?hours=" + hours;
  }
  $.ajax({
    url:url,
    dataType:"json",
    complete: function(data) {
      $("html").css("background-color", data.responseJSON.sky_color);
      updateColoredTextColorForBackgroundColor(data.responseJSON.sky_color);
    }
  });
}

function clearHarvestData() {
  $("#human-today").html("Loadingâ€¦");
  $("#hours-today").html("XX:XX");
  $("#hours-needed-today").html("XX:XX");
  $("#done-at").html("XX:XX");
  $("#times-and-projects").empty();
  startLoading();
}

function updateHarvestData() {
  $.ajax({
    url:"/api/harvest_data.json?days=" + days,
    dataType:"json",
    complete: function(data) {
      var response = data.responseJSON;
      $("#human-today").html(response.human_today);
      $("#hours-today").html(response.hours_today);
      $("#hours-needed-today").html(response.hours_needed_today);
      $("#done-at").html(response.done_at);

      stopLoading();

      $("#times-and-projects").empty();
      var timeAndProjectTemplate = $(
        '<li class="time-and-project">'
        + '<span class="time colored-text"></span>'
        + '<span class="project"></span>'
        + '</li>');
      for (var key in response.projects_and_hours_this_week) {
        var newTimeAndProject = timeAndProjectTemplate;
        newTimeAndProject.children(".time")
          .html(response.projects_and_hours_this_week[key]);
        newTimeAndProject.children(".project")
          .html(" " + key);
        $("#times-and-projects").append(newTimeAndProject[0].outerHTML);
      }
      // If there are other .colored-texts, with .colored-text-night,
      // these should be .colored-text-night too.
      if ($(".colored-text.colored-text-night").length > 0) {
        $(".time-and-project .colored-text").each(function() {
          this.classList.add("colored-text-night");
        });
      }
    }
  });
}

function updateColoredTextColorForBackgroundColor(backgroundColor) {
  if (!(typeof backgroundColor === typeof "string")) {
    backgroundColor = $("html").css("background-color");
  }

  var night = false;
  var brightness = tinycolor(backgroundColor).getBrightness();

  if ((brightness / 255.0) <= 0.5) {
    night = true;
  }

  $(".colored-text").each(function() {
    this.classList.remove("colored-text-night");
    if (night == true) {
      this.classList.add("colored-text-night");
    }
  });
}

function itsReallyTomorrow() {
  // new Date(), not Date.today() is used, because the latter does not return
  // the current time
  return ((new Date()).getHours() < 7)
}

// Date.addDays mutates the object, so this is needed.
function getToday() {
  var today = Date.today();

  if (itsReallyTomorrow()) {
    today = today.addDays(-1);
  }

  return today;
}

