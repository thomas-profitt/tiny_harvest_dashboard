var coloredTextMode = "day";

var updateInterval = 60000;
var intervalID = null;

var days = 0;

$(document).ready( function() {
  changeBackgroundColor();
  changeBackgroundImage('<%= image_path("bg5.png") %>');
  $("html").css("background-size", "cover");
  $("html").css("background-position", "top left");
  updateHarvestData();
  updateColoredTextMode();

  var paramsDays = parseInt(getURLParam("days"));
  if (isNaN(paramsDays)) {
    paramsDays = 0;
  }
  setDays(paramsDays);

  $("#yesterday").click(function(e) {
    setDays(days - 1);
    e.preventDefault();
  });

  $("#tomorrow").click(function(e) {
    setDays(days + 1);
    e.preventDefault();
  });

  $("#today").click(function(e) {
    setDays(0);
    e.preventDefault();
  });

  $("#last-sunday").click(function(e) {
    // Dumb trick, works great
    var newDays = days - 1;
    while (Date.today().addDays(newDays).getDay() != Date.SUNDAY) {
      newDays -= 1;
    }
    setDays(newDays);
    e.preventDefault();
  });

  $("#this-sunday").click(function(e) {
    // Dumb trick, works great
    var newDays = days + 1;
    while (Date.today().addDays(newDays).getDay() != Date.SUNDAY) {
      newDays += 1;
    }
    setDays(newDays);
    e.preventDefault();
  });

  var intervalID = window.setInterval(function() {
    changeBackgroundColor();
    updateHarvestData();
    updateColoredTextMode();
  }, updateInterval);
});

// FIXME: There IS NO SPINNER.
function startSpinner() {
  $("html").css("background-color", "rgb(116,0,0)");
}

function stopSpinner() {
  changeBackgroundColor();
}

function transition(direction) {
  var transitionTime = 750;
  // all, not transform, is used because Safari is weird
  var transition = "all " + transitionTime + "ms ease";
  var selector = "body *:not(.static)";
  var transformSequence = null;
  if (direction === "left") {
    transformSequence = ["translateX(100vw)", "translateX(-100vw)", "none"];
  }
  if (direction === "right") {
    transformSequence = ["translateX(-100vw)", "translateX(100vw)", "none"];
  }
  if (direction === "up") {
    transformSequence = ["translateY(100vh)", "translateY(-100vh)", "none"];
  }
  if (direction === "down") {
    transformSequence = ["translateY(-100vh)", "translateY(100vh)", "none"];
  }
  if (transformSequence === null) {
    return false;
  }

  $("html").css("overflow", "hidden");

  $(selector).css("transition", transition);
  $(selector).css("transform", transformSequence[0]);

  setTimeout(function() {
    $(selector).css("transition", "none");
    $(selector).css("transform", transformSequence[1]);
  }, transitionTime);

  setTimeout(function() {
    $(selector).css("transition", transition);
    $(selector).css("transform", transformSequence[2]);
  }, transitionTime + 125);

  setTimeout(function() {
    $(selector).css("overflow", "inherit");

    $(selector).css("transition", "none");
    $("html").css("overflow", "inherit");
  }, (transitionTime * 2) + 125);
}

function setDays(newDays) {
  var oldDays = days;
  console.log("Changing days from " + oldDays + " to " + newDays);
  days = newDays;

  if (newDays < oldDays) {
    transition("left");
  }
  if (newDays > oldDays) {
    transition("right");
  }

  clearTodayClasses();
  if (!(newDays === 0)) {
    var newClass = "";
    if (newDays < 0) {
      newClass = "forward-to-today";
    } else {
      newClass = "back-to-today";
    }
    var todayElement = $("#today")[0];
    if (todayElement) {
      todayElement.classList.add(newClass);
    }
  }

  setTimeout(function() {
    clearHarvestData();
  }, 500);

  updateHarvestData();
}

function clearTodayClasses() {
  var element = $("#today")[0];
  if (element) {
    element.classList.remove("back-to-today");
    element.classList.remove("forward-to-today");
  }
}

function changeBackgroundImage(url) {
  $("html").css("background-image", "url(\"" + url + "\")");
}

// Accepts hours as a date or number (0.0 to 24)
function changeBackgroundColor(dateOrHours) {
  if (typeof dateOrHours === typeof new Date()) {
    var hours = dateOrHours.getHours() + (dateOrHours.getMinutes() / 60.0);
  } else if (typeof dateOrHours === typeof 1.0) {
    var hours = dateOrHours;
  }
  var url = "/api/sky_color.json"
  if (typeof hours === typeof 1.0) {
    url += "?hours=" + hours;
  }
  $.ajax({
    url:url,
    dataType:"json",
    complete: function(data) {
      $("html").css("background-color", data.responseJSON.sky_color);
    }
  });
}

function clearHarvestData() {
  $("#human-today").html("Loadingâ€¦");
  $("#hours-today").html("XX:XX");
  $("#hours-needed-today").html("XX:XX");
  $("#done-at").html("XX:XX");
  $("#times-and-projects").empty();
}

function updateHarvestData() {
  $.ajax({
    url:"/api/harvest_data.json?days=" + days,
    dataType:"json",
    complete: function(data) {
      var response = data.responseJSON;
      $("#human-today").html(response.human_today);
      $("#hours-today").html(response.hours_today);
      $("#hours-needed-today").html(response.hours_needed_today);
      $("#done-at").html(response.done_at);

      $("#times-and-projects").empty();
      var timeAndProjectTemplate = $(
        '<li class="time-and-project">'
        + '<span class="time colored-text-'
        + coloredTextMode
        + '"></span><span class="project"></span>'
        + '</li>');
      for (var key in response.projects_and_hours_this_week) {
        var newTimeAndProject = timeAndProjectTemplate;
        newTimeAndProject.children(".time")
          .html(response.projects_and_hours_this_week[key]);
        newTimeAndProject.children(".project")
          .html(" " + key);
        $("#times-and-projects").append(newTimeAndProject[0].outerHTML);
      }
    }
  });
}

function updateColoredTextMode() {
  var oldColoredTextMode = coloredTextMode;
  var now = new Date();

  if (now.getHours() + now.getMinutes() / 60.0 >= 20.5 || now.getHours() <= 5) {
    coloredTextMode = "night";
  } else {
    coloredTextMode = "day";
  }

  if (oldColoredTextMode != coloredTextMode) {
    $(".colored-text-" + oldColoredTextMode).each(function() {
      this.classList.remove("colored-text-" + oldColoredTextMode);
      this.classList.add("colored-text-" + coloredTextMode)
    });
  }

}
